From 29e8fda3fc8736fe5054af134568030c0dd64455 Mon Sep 17 00:00:00 2001
From: Roman Shpuntov <roman.shpuntov@gmail.com>
Date: Tue, 4 Feb 2020 20:05:06 +0700
Subject: [PATCH 2/2] Add tvos device support

---
 gio/gtestdbus.c                  |  7 ++++++-
 gio/tests/gdbus-non-socket.c     |  8 ++++++--
 gio/tests/gschema-compile.c      |  2 ++
 gio/tests/socket.c               |  5 ++++-
 glib/gbacktrace.c                | 12 +++++++++++-
 glib/gspawn.c                    | 26 ++++++++++++++++++++++++++
 glib/gtestutils.c                |  6 ++++++
 glib/tests/spawn-multithreaded.c |  4 ++++
 meson.build                      |  4 ++++
 9 files changed, 69 insertions(+), 5 deletions(-)

diff --git a/gio/gtestdbus.c b/gio/gtestdbus.c
index 6aedb3eae..6a8a3e21e 100644
--- a/gio/gtestdbus.c
+++ b/gio/gtestdbus.c
@@ -242,6 +242,7 @@ watcher_init (void)
   static gsize started = 0;
   static GIOChannel *channel = NULL;
   int errsv;
+  pid_t child = -1;
 
   if (g_once_init_enter (&started))
     {
@@ -265,7 +266,11 @@ watcher_init (void)
       fflush (stdout);
       fflush (stderr);
 
-      switch (fork ())
+#if HAVE_FORK == 1
+      child = fork ();
+#endif
+
+      switch (child)
         {
         case -1:
           errsv = errno;
diff --git a/gio/tests/gdbus-non-socket.c b/gio/tests/gdbus-non-socket.c
index 598c37ecb..578a5228e 100644
--- a/gio/tests/gdbus-non-socket.c
+++ b/gio/tests/gdbus-non-socket.c
@@ -135,7 +135,7 @@ test_non_socket (void)
   GDBusConnection *connection;
   GError *error;
   gchar *guid;
-  pid_t first_child;
+  pid_t first_child = -1;
   GVariant *ret;
   const gchar *str;
   gboolean ok;
@@ -152,7 +152,11 @@ test_non_socket (void)
   g_assert (G_IS_INPUT_STREAM (g_io_stream_get_input_stream (streams[1])));
   g_assert (G_IS_OUTPUT_STREAM (g_io_stream_get_output_stream (streams[1])));
 
-  switch ((first_child = fork ()))
+#if HAVE_FORK == 1
+  first_child = fork ();
+#endif
+
+  switch (first_child)
     {
     case -1:
       g_assert_not_reached ();
diff --git a/gio/tests/gschema-compile.c b/gio/tests/gschema-compile.c
index 6a51e424e..8f0d35ed7 100644
--- a/gio/tests/gschema-compile.c
+++ b/gio/tests/gschema-compile.c
@@ -27,7 +27,9 @@ test_schema_do_compile (gpointer data)
   };
   gchar *envp[] = { NULL };
 
+#if HAVE_FORK == 1
   execve (argv[0], (char **) argv, envp);
+#endif
   g_assert_not_reached ();
 }
 
diff --git a/gio/tests/socket.c b/gio/tests/socket.c
index c1c1bcf41..0633069c1 100644
--- a/gio/tests/socket.c
+++ b/gio/tests/socket.c
@@ -1459,7 +1459,7 @@ test_unix_connection_ancillary_data (void)
   gint pv[2], sv[3];
   gint status, fd, len;
   char buffer[1024];
-  pid_t pid;
+  pid_t pid = -1;
 
   status = pipe (pv);
   g_assert_cmpint (status, ==, 0);
@@ -1467,7 +1467,10 @@ test_unix_connection_ancillary_data (void)
   status = socketpair (PF_UNIX, SOCK_STREAM, 0, sv);
   g_assert_cmpint (status, ==, 0);
 
+#if HAVE_FORK == 1
   pid = fork ();
+#endif
+
   g_assert_cmpint (pid, >=, 0);
 
   /* Child: close its copy of the write end of the pipe, receive it
diff --git a/glib/gbacktrace.c b/glib/gbacktrace.c
index 9c52a7d29..e0d83a0d7 100644
--- a/glib/gbacktrace.c
+++ b/glib/gbacktrace.c
@@ -260,7 +260,7 @@ void
 g_on_error_stack_trace (const gchar *prg_name)
 {
 #if defined(G_OS_UNIX)
-  pid_t pid;
+  pid_t pid = -1;
   gchar buf[16];
   const gchar *args[5] = { DEBUGGER, NULL, NULL, NULL, NULL };
   int status;
@@ -279,7 +279,10 @@ g_on_error_stack_trace (const gchar *prg_name)
   args[2] = buf;
 #endif
 
+#if HAVE_FORK == 1
   pid = fork ();
+#endif
+
   if (pid == 0)
     {
       stack_trace (args);
@@ -403,9 +406,15 @@ stack_trace (const char * const *args)
       _exit (0);
     }
 
+#if HAVE_FORK == 1
   pid = fork ();
+#else
+  pid = -1;
+#endif
+
   if (pid == 0)
     {
+#if HAVE_FORK == 1
       /* Save stderr for printing failure below */
       int old_err = dup (2);
       if (old_err != -1)
@@ -433,6 +442,7 @@ stack_trace (const char * const *args)
         }
       perror ("exec " DEBUGGER " failed");
       _exit (0);
+#endif
     }
   else if (pid == (pid_t) -1)
     {
diff --git a/glib/gspawn.c b/glib/gspawn.c
index 4f4c55d99..a283d0165 100644
--- a/glib/gspawn.c
+++ b/glib/gspawn.c
@@ -2335,7 +2335,9 @@ fork_exec (gboolean              intermediate_child,
   if (intermediate_child && !g_unix_open_pipe (child_pid_report_pipe, pipe_flags, error))
     goto cleanup_and_fail;
   
+#if HAVE_FORK
   pid = fork ();
+#endif
 
   if (pid < 0)
     {
@@ -2388,7 +2390,11 @@ fork_exec (gboolean              intermediate_child,
            */
           GPid grandchild_pid;
 
+#if HAVE_FORK == 1
           grandchild_pid = fork ();
+#else
+	  grandchild_pid = -1;
+#endif
 
           if (grandchild_pid < 0)
             {
@@ -2631,6 +2637,7 @@ success:
 
   if (pid > 0)
   {
+#if HAVE_FORK == 1
     wait_failed:
      if (waitpid (pid, NULL, 0) < 0)
        {
@@ -2641,6 +2648,7 @@ success:
           else
             g_warning ("waitpid() should not fail in 'fork_exec'");
        }
+#endif
    }
 
   close_and_invalidate (&stdin_pipe[0]);
@@ -2690,11 +2698,13 @@ script_execute (const gchar *file,
       --argc;
     }
 
+#if HAVE_FORK == 1
   /* Execute the shell. */
   if (envp)
     execve (argv_buffer[0], argv_buffer, envp);
   else
     execv (argv_buffer[0], argv_buffer);
+#endif
 
   return TRUE;
 }
@@ -2711,6 +2721,8 @@ my_strchrnul (const gchar *str, gchar c)
   return p;
 }
 
+#if HAVE_FORK == 1
+
 /* This function is called between fork() and exec() and hence must be
  * async-signal-safe (see signal-safety(7)) until it calls exec(). */
 static gint
@@ -2851,6 +2863,20 @@ g_execute (const gchar  *file,
   /* Return the error from the last attempt (probably ENOENT).  */
   return -1;
 }
+#else
+static gint
+g_execute (const gchar  *file,
+           gchar       **argv,
+           gchar       **argv_buffer,
+           gsize         argv_buffer_len,
+           gchar       **envp,
+           const gchar  *search_path,
+           gchar        *search_path_buffer,
+           gsize         search_path_buffer_len)
+{
+  return -1;
+}
+#endif
 
 /**
  * g_spawn_close_pid:
diff --git a/glib/gtestutils.c b/glib/gtestutils.c
index de70e921a..9f59e2f2a 100644
--- a/glib/gtestutils.c
+++ b/glib/gtestutils.c
@@ -3670,7 +3670,13 @@ g_test_trap_fork (guint64        usec_timeout,
       errsv = errno;
       g_error ("failed to create pipes to fork test program: %s", g_strerror (errsv));
     }
+
+#if HAVE_FORK == 1
   test_trap_last_pid = fork ();
+#else
+  test_trap_last_pid = -1;
+#endif
+
   errsv = errno;
   if (test_trap_last_pid < 0)
     g_error ("failed to fork test program: %s", g_strerror (errsv));
diff --git a/glib/tests/spawn-multithreaded.c b/glib/tests/spawn-multithreaded.c
index 9e399b43d..b6a167558 100644
--- a/glib/tests/spawn-multithreaded.c
+++ b/glib/tests/spawn-multithreaded.c
@@ -77,7 +77,11 @@ get_a_child (gint ttl)
 
   return pid;
 #else
+#if HAVE_FORK == 1
   pid = fork ();
+#else
+  pid = -1;
+#endif
   if (pid < 0)
     exit (1);
 
diff --git a/meson.build b/meson.build
index 3246b909c..05e69e524 100644
--- a/meson.build
+++ b/meson.build
@@ -2272,6 +2272,10 @@ main (void)
   exit (__getcmdline ());
 }'''
 
+if host_system != 'windows' and cc.has_function('fork', prefix : '#include <unistd.h>')
+  glib_conf.set('HAVE_FORK', 1)
+endif
+
 if cc_can_run
   rres = cc.run(cmdline_test_code, name : '/proc/self/cmdline')
   have_proc_self_cmdline = rres.compiled() and rres.returncode() == 0
-- 
2.39.2

