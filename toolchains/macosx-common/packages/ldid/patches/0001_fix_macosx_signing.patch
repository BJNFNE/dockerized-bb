commit b4f3de4581d73712cde4ae306c1f4070dd67ab7f
Author: Le Philousophe <lephilousophe@users.noreply.github.com>
Date:   Mon May 17 22:57:18 2021 +0200

    Fix bundle signing

diff --git a/ldid.cpp b/ldid.cpp
index da4c0c7..f63c02d 100644
--- a/ldid.cpp
+++ b/ldid.cpp
@@ -1881,8 +1881,8 @@ static void req(std::streambuf &buffer, uint8_t (&&data)[Size_]) {
     put(buffer, zeros, 3 - (Size_ + 3) % 4);
 }
 
-Hash Sign(const void *idata, size_t isize, std::streambuf &output, const std::string &identifier, const std::string &entitlements, bool merge, const std::string &requirements, const std::string &key, const Slots &slots, uint32_t flags, bool platform, const Progress &progress) {
-    Hash hash;
+Hashes Sign(const void *idata, size_t isize, std::streambuf &output, const std::string &identifier, const std::string &entitlements, bool merge, const std::string &requirements, const std::string &key, const Slots &slots, uint32_t flags, bool platform, const Progress &progress) {
+    Hashes file_cdhashes;
 
 
     std::string team;
@@ -1906,6 +1906,7 @@ Hash Sign(const void *idata, size_t isize, std::streambuf &output, const std::st
     } else {
         Blobs blobs;
 
+        /*
         std::stringbuf requirement;
         req(requirement, exprForm);
         req(requirement, opAnd);
@@ -1924,6 +1925,7 @@ Hash Sign(const void *idata, size_t isize, std::streambuf &output, const std::st
         req(requirement, (uint8_t []) {APPLE_EXTENSION_OID, 2, 1});
         req(requirement, matchExists);
         insert(blobs, 3, CSMAGIC_REQUIREMENT, requirement);
+        */
 
         put(backing, CSMAGIC_REQUIREMENTS, blobs);
     }
@@ -2083,6 +2085,7 @@ Hash Sign(const void *idata, size_t isize, std::streambuf &output, const std::st
         }));
 
         unsigned total(0);
+        Hash hash;
         for (Algorithm *pointer : GetAlgorithms()) {
             Algorithm &algorithm(*pointer);
 
@@ -2165,6 +2168,7 @@ Hash Sign(const void *idata, size_t isize, std::streambuf &output, const std::st
 
             ++total;
         }
+        file_cdhashes.push_back(hash);
 
 #ifndef LDID_NOSMIME
         if (!key.empty()) {
@@ -2236,7 +2240,7 @@ Hash Sign(const void *idata, size_t isize, std::streambuf &output, const std::st
         return put(output, CSMAGIC_EMBEDDED_SIGNATURE, blobs);
     }), progress);
 
-    return hash;
+    return file_cdhashes;
 }
 
 #ifndef LDID_NOTOOLS
@@ -2584,7 +2588,7 @@ struct RuleCode {
 };
 
 #ifndef LDID_NOPLIST
-static Hash Sign(const uint8_t *prefix, size_t size, std::streambuf &buffer, Hash &hash, std::streambuf &save, const std::string &identifier, const std::string &entitlements, bool merge, const std::string &requirements, const std::string &key, const Slots &slots, size_t length, uint32_t flags, bool platform, const Progress &progress) {
+static Hashes Sign(const uint8_t *prefix, size_t size, std::streambuf &buffer, Hash &hash, std::streambuf &save, const std::string &identifier, const std::string &entitlements, bool merge, const std::string &requirements, const std::string &key, const Slots &slots, size_t length, uint32_t flags, bool platform, const Progress &progress) {
     // XXX: this is a miserable fail
     std::stringbuf temp;
     put(temp, prefix, size);
@@ -2609,7 +2613,7 @@ struct State {
     }
 };
 
-Bundle Sign(const std::string &root, Folder &parent, const std::string &key, State &remote, const std::string &requirements, const Functor<std::string (const std::string &, const std::string &)> &alter, const Progress &progress) {
+Bundle Sign(const std::string &root, Folder &parent, const std::string &key, State &remote, const std::string &requirements, const Functor<std::string (const std::string &, const std::string &)> &alter, uint32_t flags, bool platform, const Progress &progress) {
     std::string executable;
     std::string identifier;
 
@@ -2706,7 +2710,7 @@ Bundle Sign(const std::string &root, Folder &parent, const std::string &key, Sta
 
         bundles[nested[1]] = Sign(bundle, subfolder, key, local, "", Starts(name, "PlugIns/") ? alter :
             static_cast<const Functor<std::string (const std::string &, const std::string &)> &>(fun([&](const std::string &, const std::string &) -> std::string { return entitlements; }))
-        , progress);
+        , flags, platform, progress);
     }), fun([&](const std::string &name, const Functor<std::string ()> &read) {
     }));
 
@@ -2759,7 +2763,7 @@ Bundle Sign(const std::string &root, Folder &parent, const std::string &key, Sta
                     case MH_CIGAM: case MH_CIGAM_64:
                         folder.Save(name, true, flag, fun([&](std::streambuf &save) {
                             Slots slots;
-                            Sign(header.bytes, size, data, hash, save, identifier, "", false, "", key, slots, length, 0, false, Progression(progress, root + name));
+                            Sign(header.bytes, size, data, hash, save, identifier, "", false, "", key, slots, length, flags, platform, Progression(progress, root + name));
                         }));
                         return;
                 }
@@ -2789,6 +2793,22 @@ Bundle Sign(const std::string &root, Folder &parent, const std::string &key, Sta
 
         bool old(&version.second == &rules1);
 
+        if (!old && mac)
+            for (const auto &bundle : bundles) {
+                auto entry(plist_new_dict());
+                plist_dict_set_item(entry, "cdhash", plist_new_data(reinterpret_cast<const char *>(bundle.second.hashes.front().sha256_), 20));
+                std::string req;
+                _foreach (cdhash, bundle.second.hashes) {
+                    req += "cdhash H\"" + Hex(cdhash.sha1_, sizeof(cdhash.sha1_)) + "\" or " ;
+                    req += "cdhash H\"" + Hex(cdhash.sha256_, 20) + "\" or " ;
+                }
+                // remove trailing or
+                req.resize(req.size () - 4);
+
+                plist_dict_set_item(entry, "requirement", plist_new_string(req.c_str()));
+                plist_dict_set_item(files, bundle.first.c_str(), entry);
+            }
+
         for (const auto &hash : local.files)
             for (const auto &rule : version.second)
                 if (rule(hash.first)) {
@@ -2822,14 +2842,6 @@ Bundle Sign(const std::string &root, Folder &parent, const std::string &key, Sta
 
                         break;
                     }
-
-        if (!old && mac)
-            for (const auto &bundle : bundles) {
-                auto entry(plist_new_dict());
-                plist_dict_set_item(entry, "cdhash", plist_new_data(reinterpret_cast<const char *>(bundle.second.hash.sha256_), sizeof(bundle.second.hash.sha256_)));
-                plist_dict_set_item(entry, "requirement", plist_new_string("anchor apple generic"));
-                plist_dict_set_item(files, bundle.first.c_str(), entry);
-            }
     }
 
     for (const auto &version : versions) {
@@ -2889,7 +2901,7 @@ Bundle Sign(const std::string &root, Folder &parent, const std::string &key, Sta
             Slots slots;
             slots[1] = local.files.at(info);
             slots[3] = local.files.at(signature);
-            bundle.hash = Sign(NULL, 0, buffer, local.files[executable], save, identifier, entitlements, false, requirements, key, slots, length, 0, false, Progression(progress, root + executable));
+            bundle.hashes = Sign(NULL, 0, buffer, local.files[executable], save, identifier, entitlements, false, requirements, key, slots, length, flags, platform, Progression(progress, root + executable));
         }));
     }));
 
@@ -2897,9 +2909,9 @@ Bundle Sign(const std::string &root, Folder &parent, const std::string &key, Sta
     return bundle;
 }
 
-Bundle Sign(const std::string &root, Folder &folder, const std::string &key, const std::string &requirements, const Functor<std::string (const std::string &, const std::string &)> &alter, const Progress &progress) {
+Bundle Sign(const std::string &root, Folder &folder, const std::string &key, const std::string &requirements, const Functor<std::string (const std::string &, const std::string &)> &alter, uint32_t flags, bool platform, const Progress &progress) {
     State local;
-    return Sign(root, folder, key, local, requirements, alter, progress);
+    return Sign(root, folder, key, local, requirements, alter, flags, platform, progress);
 }
 #endif
 
@@ -3162,7 +3174,7 @@ int main(int argc, char *argv[]) {
             _assert(flag_S);
 #ifndef LDID_NOPLIST
             ldid::DiskFolder folder(path + "/");
-            path += "/" + Sign("", folder, key, requirements, ldid::fun([&](const std::string &, const std::string &) -> std::string { return entitlements; }), dummy_).path;
+            path += "/" + Sign("", folder, key, requirements, ldid::fun([&](const std::string &, const std::string &) -> std::string { return entitlements; }), flags, platform, dummy_).path;
 #else
             _assert(false);
 #endif
diff --git a/ldid.hpp b/ldid.hpp
index 7f2f328..501ff8f 100644
--- a/ldid.hpp
+++ b/ldid.hpp
@@ -149,18 +149,21 @@ struct Hash {
     uint8_t sha1_[0x14];
     uint8_t sha256_[0x20];
 };
+typedef std::vector<Hash> Hashes;
 
 struct Bundle {
     std::string path;
-    Hash hash;
+    Hashes hashes;
 };
 
-Bundle Sign(const std::string &root, Folder &folder, const std::string &key, const std::string &requirements, const Functor<std::string (const std::string &, const std::string &)> &alter, const Progress &progress);
+Bundle Sign(const std::string &root, Folder &folder, const std::string &key, const std::string &requirements, const Functor<std::string (const std::string &, const std::string &)> &alter, uint32_t flags, bool platform, const Progress &progress);
 
 typedef std::map<uint32_t, Hash> Slots;
 
-Hash Sign(const void *idata, size_t isize, std::streambuf &output, const std::string &identifier, const std::string &entitlements, bool merge, const std::string &requirements, const std::string &key, const Slots &slots, uint32_t flags, bool platform, const Progress &progress);
+Hashes Sign(const void *idata, size_t isize, std::streambuf &output, const std::string &identifier, const std::string &entitlements, bool merge, const std::string &requirements, const std::string &key, const Slots &slots, uint32_t flags, bool platform, const Progress &progress);
 
 }
 
+std::string Hex(const uint8_t *data, size_t size);
+
 #endif//LDID_HPP
