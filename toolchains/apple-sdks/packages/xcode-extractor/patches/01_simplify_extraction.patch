diff --git a/tools/gen_sdk_package_pbzx.sh b/tools/gen_sdk_package_pbzx.sh
index d741550..1b79835 100755
--- a/tools/gen_sdk_package_pbzx.sh
+++ b/tools/gen_sdk_package_pbzx.sh
@@ -23,6 +23,123 @@ pushd $BUILD_DIR &>/dev/null
 build_xar
 
 get_sources https://github.com/tpoechtrager/pbzx.git $PBZX_VERSION
+patch -d "$CURRENT_BUILD_PROJECT_NAME" -p1 <<-'EOF'
+diff --git a/pbzx.c b/pbzx.c
+index d01ef35..4143a61 100644
+--- a/pbzx.c
++++ b/pbzx.c
+@@ -32,10 +32,17 @@
+ #define ZBSZ 1024 * XBSZ
+ #define VERSION "1.0.2"
+ 
++/* Possible types for the #stream structure. */
++enum {
++    STREAM_XAR = 1,
++    STREAM_XIP,
++    STREAM_FP
++};
++
+ /* Structure to hold the command-line options. */
+ struct options {
++    int  type;    /* Type of input data: XAR or XIP archive or directly the pbzx Payload */
+     bool stdin;    /* True if data should be read from stdin. */
+-    bool noxar;    /* The input data is not a XAR archive but the pbzx Payload. */
+     bool help;     /* Print usage with details and exit. */
+     bool version;  /* Print version and exit. */
+ };
+@@ -43,7 +50,7 @@ struct options {
+ /* Prints usage information and exit. Optionally, displays an error message and
+  * exits with an error code. */
+ static void usage(char const* error) {
+-    fprintf(stderr, "usage: pbzx [-v] [-h] [-n] [-] [filename]\n");
++    fprintf(stderr, "usage: pbzx [-v] [-h] [-ni] [-] [filename]\n");
+     if (error) {
+         fprintf(stderr, "error: %s\n", error);
+         exit(EINVAL);
+@@ -70,12 +77,14 @@ static void version() {
+ /* Parses command-line flags into the #options structure and adjusts the
+  * argument count and values on the fly to remain only positional arguments. */
+ static void parse_args(int* argc, char const** argv, struct options* opts) {
++    opts->type = STREAM_XAR;
+     for (int i = 0; i < *argc; ++i) {
+         /* Skip arguments that are not flags. */
+         if (argv[i][0] != '-') continue;
+         /* Match available arguments. */
+         if      (strcmp(argv[i], "-")  == 0) opts->stdin = true;
+-        else if (strcmp(argv[i], "-n") == 0) opts->noxar = true;
++        else if (strcmp(argv[i], "-n") == 0) opts->type = STREAM_FP;
++        else if (strcmp(argv[i], "-i") == 0) opts->type = STREAM_XIP;
+         else if (strcmp(argv[i], "-h") == 0) opts->help = true;
+         else if (strcmp(argv[i], "-v") == 0) opts->version = true;
+         else usage("unrecognized flag");
+@@ -91,19 +100,13 @@ static inline uint32_t min(uint32_t a, uint32_t b) {
+     return (a < b ? a : b);
+ }
+ 
+-/* Possible types for the #stream structure. */
+-enum {
+-    STREAM_XAR = 1,
+-    STREAM_FP
+-};
+-
+ /* Generic datastructure that can represent a streamed file in a XAR archive
+  * or a C FILE pointer. The stream is initialized respectively depending on
+  * the command-line flags. */
+ struct stream {
+-    int type;       /* One of #STREAM_XAR and #STREAM_FP. */
+-    xar_t xar;      /* Only valid if #type == #STREAM_XAR. */
+-    xar_stream xs;  /* Only valid if #type == #STREAM_XAR. */
++    int type;       /* One of #STREAM_XAR, #STREAM_XIP and #STREAM_FP. */
++    xar_t xar;      /* Only valid if #type == #STREAM_XAR or #STREAM_XIP. */
++    xar_stream xs;  /* Only valid if #type == #STREAM_XAR or #STREAM_XIP. */
+     FILE* fp;       /* Only valid if #type == #STREAM_FP. */
+ };
+ 
+@@ -120,14 +123,28 @@ static bool stream_open(struct stream* s, int type, const char* filename) {
+     stream_init(s);
+     s->type = type;
+     switch (type) {
+-        case STREAM_XAR: {
++        case STREAM_XAR:
++        case STREAM_XIP: {
++            const char *member_name;
++            size_t member_name_size;
++            if (type == STREAM_XAR) {
++                member_name = "Payload";
++                member_name_size = 7;
++            }
++            else if (type == STREAM_XIP) {
++                member_name = "Content";
++                member_name_size = 7;
++            }
++            else {
++                return false;
++            }
+             s->xar = xar_open(filename, READ);
+             if (!s->xar) return false;
+             xar_iter_t i = xar_iter_new();
+             xar_file_t f = xar_file_first(s->xar, i);
+             char* path = NULL;
+             /* Find the Payload file in the archive. */
+-            while (strncmp((path = xar_get_path(f)), "Payload", 7) &&
++            while (strncmp((path = xar_get_path(f)), member_name, member_name_size) &&
+                    (f = xar_file_next(i))) {
+                 free(path);
+             }
+@@ -221,11 +238,8 @@ int main(int argc, const char** argv) {
+         stream.fp = stdin;
+         success = true;
+     }
+-    else if (opts.noxar) {
+-        success = stream_open(&stream, STREAM_FP, filename);
+-    }
+     else {
+-        success = stream_open(&stream, STREAM_XAR, filename);
++        success = stream_open(&stream, opts.type, filename);
+     }
+     if (!success) {
+         fprintf(stderr, "failed to open: %s\n", filename);
+EOF
 
 if [ $f_res -eq 1 ]; then
   pushd $CURRENT_BUILD_PROJECT_NAME &>/dev/null
@@ -41,10 +158,7 @@ pushd $TMP_DIR &>/dev/null
 echo "Extracting $XCODE (this may take several minutes) ..."
 
 LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$TARGET_DIR/lib \
-  verbose_cmd "$TARGET_DIR/bin/xar -xf $XCODE -C $TMP_DIR"
-
-LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$TARGET_DIR/lib \
-  verbose_cmd "$TARGET_DIR/SDK/tools/bin/pbzx -n Content | cpio -i"
+  verbose_cmd "$TARGET_DIR/SDK/tools/bin/pbzx -i $XCODE | cpio -i"
 
 popd &>/dev/null # TMP_DIR
 popd &>/dev/null # BUILD_DIR
